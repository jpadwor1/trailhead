<% layout('partials/boilerplate', {authenticated:authenticated}) -%>



<div class="map-container">
  <div id="map"></div>
  <div class="list-wrapper">
    <div class="search-page-container"> 
      <ul>
        <% trails.forEach((trail) => { %>
          <% function randomFloat(min,max) { return (Math.random() * (max - min) + min).toFixed(1)} %>
            <li class="trail-list-item">
              <a href="/trails/<%= trail._id%>">
                <div class="nearby-trail-container">
                    <img loading="lazy" class="nearby-trail-image" src="<%=trailImages[Math.floor(randomFloat(0,trailImages.length)) ]%>" alt="<%= trail.properties.name %>">
                
                    <div class="nearby-trail-body">
                        <div class="nearby-trail-reviews">
                            <img src="../images/review star.png" alt="review star" class="nearby-review-star">
        
                            
                            
                            
                             <p><%= randomFloat(3,5) %></p>
                            <p>(<%= Math.floor(Math.random() * (559 - 12) + 12) %>)</p>
                        </div>
                          
                        <div class="nearby-trail-details">
                            <h3><%=trail.properties.name%></h3>
                            
                            <p class="city_state"><%= trail.properties.city%>,<%=trail.properties.state%></p>
                        </div>
                    </div>
                </div>
            </a>
        <% }) %>
            </li>
        
      </ul>
    </div>
  </div>
</div>




  <script>
    var animationStep = 70;
    const trails = <%- JSON.stringify(trails) %>;

  
 
  
  const geoJSONData = {
    type: 'FeatureCollection',
    features: trails.map(trail => {
      let firstCoordinate;
      if (trail.geometry.type === 'LineString') {
        firstCoordinate = trail.geometry.coordinates[0];
      } else if (trail.geometry.type === 'MultiLineString') {
        firstCoordinate = trail.geometry.coordinates[0][0];
      } else if (trail.geometry.type === 'Point') {
        firstCoordinate = trail.geometry.coordinates;
      }
        return {
          
          type: 'Feature',
          properties: {
              ...trail.properties,
              lineGeometry: trail.geometry,
              id: trail.properties['@id'],
              uniqueId: trail._id,  
          
          },
          geometry: {
            type: 'Point',
            coordinates: firstCoordinate
          }
        };
      })
    };
  
  
      mapboxgl.accessToken = '<%= mapbox %>';
  

  // Create a map instance
  const map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/outdoors-v12',
    center: [<%=centerLng%>, <%=centerLat%>],
    zoom: 6
  });
  
  
  
  map.on('load', () => {
    map.addSource('points', {
      'type': 'geojson',
      'data': geoJSONData,
      'cluster': true,
      'clusterMaxZoom': 12,
      'clusterRadius': 50
    });
  
  
    map.addLayer({
      id: 'clusters',
      type: 'circle',
      source: 'points',
      filter: ['has', 'point_count'],
      paint: {
        'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 10, '#f1f075', 16, '#f28cb1'],
        'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]
      }
    });
  
    map.addLayer({
      id: 'cluster-count',
      type: 'symbol',
      source: 'points',
      filter: ['has', 'point_count'],
      layout: {
        'text-field': '{point_count_abbreviated}',
        'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
        'text-size': 12
      }
    });
  
    map.addLayer({
      id: 'unclustered-point',
      type: 'circle',
      source: 'points',
      filter: ['!', ['has', 'point_count']],
      paint: {
        'circle-color': '#42f548',
        'circle-radius': 6,
        'circle-stroke-width': 2,
        'circle-stroke-color': '#fff'
      }
    });
  });
  
  
  
  // inspect a cluster on click
  map.on('click', 'clusters', (e) => {
      const features = map.queryRenderedFeatures(e.point, {
      layers: ['clusters']
      });
      const clusterId = features[0].properties.cluster_id;
      map.getSource('points').getClusterExpansionZoom(
      clusterId,
      (err, zoom) => {
      if (err) return;
       
      map.easeTo({
      center: features[0].geometry.coordinates,
      zoom: zoom
      });
      }
      );
  });
  
  // Add all lines when the map loads, but set their visibility to none
  map.on('load', () => {
      trails.forEach((trail, index) => {
          const id = trail.properties['@id'];
          map.addSource(`route${id}`, {
          type: 'geojson',
          data: {
            type: 'Feature',
            properties: {},
            geometry: trail.geometry
          }
        });
    
        map.addLayer({
          id: `route${id}`,
          type: 'line',
          source: `route${id}`,
          layout: {
            'line-join': 'round',
            'line-cap': 'round',
            'visibility': 'none' 
          },
          paint: {
            'line-color': '#025464',
            'line-opacity': 0.4,
            'line-width': 6
          }
        });
  
        map.addLayer({
          id: `route${id}-ant-trail`, // Use a unique ID for the ant trail layer
          type: 'line',
          source: `route${id}`,
          layout: {
            'line-join': 'round',
            'line-cap': 'round',
            'visibility': 'none'          
          },
          paint: {
            'line-color': '#025464', // Set a different color for the ant trail
            'line-width': 6, // Adjust the width of the ant trail line
            'line-dasharray': [0, 2, 1], // Use a dashed line for the ant trail effect
          },
          before: `route${id}` // Specify the existing layer ID to render the ant trail layer underneath it
        });
  
        function enableLineAnimation(layerId) {
          var step = 0;
          let dashArraySeq = [
            [0, 4, 3],
            [1, 4, 2],
            [2, 4, 1],
            [3, 4, 0],
            [0, 1, 3, 3],
            [0, 2, 3, 2],
            [0, 3, 3, 1]
          ];
          setInterval(() => {
              step = (step + 1) % dashArraySeq.length;
              map.setPaintProperty(layerId, 'line-dasharray', dashArraySeq[step]);
            }, animationStep);
        }
    let currentId;
    
    map.on('mouseenter', 'unclustered-point', (e) => {
      const { id } = e.features[0].properties;
      currentId = id;
  
      // Change the cursor style as a UI indicator.
      map.getCanvas().style.cursor = 'pointer';
      // Change visibility of the clicked line
      map.setLayoutProperty(`route${id}`, 'visibility', 'visible');
      map.setLayoutProperty(`route${id}-ant-trail`, 'visibility', 'visible');
      enableLineAnimation(`route${id}-ant-trail`);
    });
    
    map.on('mouseleave', 'unclustered-point', () => {
      map.getCanvas().style.cursor = '';
      if (currentId) {
        map.setLayoutProperty(`route${currentId}`, 'visibility', 'none');
      map.setLayoutProperty(`route${currentId}-ant-trail`, 'visibility', 'none');
        currentId = undefined;
      }
    });
  });
  });
  
  map.on('click', 'unclustered-point', (e) => {
      const coordinates = e.features[0].geometry.coordinates.slice();
      const name = e.features[0].properties.name;
      const { id } = e.features[0].properties;
      const uniqueId = e.features[0].properties.uniqueId;
  
      // Ensure that if the map is zoomed out such that
      // multiple copies of the feature are visible, the
      // popup appears over the copy being pointed to.
      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
      }
      
      new mapboxgl.Popup()
    .setLngLat(coordinates)
    .setHTML(`<h3>${name}</h3><p><a href="/trails/${uniqueId}">Go to trail</a></p>`)
    .addTo(map);
  });
  
  
  </script>
  